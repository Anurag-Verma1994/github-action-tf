# this workflow job is used to automate provisioning resources on GCP platform with terraform
# author: Anurag Verma

name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:
  # To trigger the job manually
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
  terraform:
    name: ${{matrix.runner}} - ${{ matrix.environment }}
    runs-on: ${{ matrix.runner }}
    strategy:
      max-parallel: 1
      matrix:
         include:
           - environment: dev
             runner: ubuntu-latest
           - environment: prod
             runner: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
           rm -rf .terraform
           terraform init -backend-config=${{ matrix.environment }}/backend.tfvars -upgrade=true -no-color -input=false
    # Setup gcloud CLI
    - name: setup gcloud CLI
      uses: actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT }}
        # this is the json key of the service account created on the project
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}  
        export_default_credentials: true

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: erraform fmt -check -diff -recursive ../

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: |
          terraform plan -input=false -var-file=${{ matrix.environment }}/terraform.tfvars -no-color
      
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      id: apply
      run: terraform apply -auto-approve -input=false -var-file=${{ matrix.environment }}/terraform.tfvars
  comment:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Please check code before raising PR!'
              })
 